#!/usr/bin/python

from PIL import Image, ImageDraw
from pyzbar.pyzbar import decode
from pwn import *

def patch_binary(binary_path):
    patches =[
        (0x834, '\x74'),      # revert access() rval check logic
        (0x8a4, '\x90' * 19), # NOP all fork() related stuff
        (0x8cb, '\x90' * 5),  # NOP call to alarm()
        (0x908, '\x90' * 3),  # NOP nullptr dereference 
        (0x6c0, '\xc3')       # prevent libc sleep() calls  
]
    with file(binary_path, 'r+b') as fh:
        for addr, patch in patches:
            fh.seek(addr)
            fh.write(patch)
        fh.close()

def string_to_qr_img(qr_str):
    qr_lines = qr_str.split()
    pixel_size = 16
    qr_img = Image.new('RGB', (len(qr_lines) * pixel_size, len(qr_lines[0] * pixel_size)))
    draw = ImageDraw.Draw(qr_img)

    for y in range(len(qr_lines)):
        for x in range(len(qr_lines[0])):
            color = 'black' if qr_lines[y][x] is 'b' else 'white'
            draw.rectangle(((x * pixel_size, y * pixel_size), ((x + 1) * pixel_size, (y + 1) * pixel_size)), fill=color)
    return qr_img


binary_path = './minefield'

print '[*] patch binary'
patch_binary(binary_path)

print '[*] run binary'
t = process(binary_path)

print '[*] read binary output'
_ = t.readuntil('smartphone?\n')
qr_flag_str = t.readuntil('\n\n')[:-2]

print '[*] generate QR code image from string representation'
qr_flag_img = string_to_qr_img(qr_flag_str)

print '[*] decode QR code image'
qr_data = decode(qr_flag_img)
print('[*] Flag: {}'.format(qr_data[0].data))

