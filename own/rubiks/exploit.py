#!/usr/bin/python

# depends on https://github.com/dwalton76/rubiks-cube-NxNxN-solver

from pwn import *
from sys import argv
import re

times = 10

if len(argv) != 2:
    exit('./exploit.py 2x2x2|3x3x3')

if argv[1] == '2x2x2':
    t = remote('endpoint', 1337)
elif argv[1] == '3x3x3':
    t = remote('endpoint', 1338)
else:
    exit('invalid cube type: ' + argv[1])

for i in range(times):
    print t.readuntil('Solved: {}/{}'.format(i, times))

    cube = t.readuntil("[B/B'/D/D'/F/F'/L/L'/R/R'/U/U'/help]> ").split('\n')[2:-2]
    tmp = []
    regex = re.compile('[^rgbwyo]')
    for c in cube: 
        if '+' not in c:
            tmp.append(regex.sub('', c)[::4].replace('r', 'R').replace('o', 'L').replace('b', 'B').replace('g', 'F').replace('w', 'U').replace('y', 'D')) 
    cube = tmp[::2]

    if argv[1] == '2x2x2':
        state = cube[0] + cube[1] + \
                cube[2][4:-2] + cube[3][4:-2] + \
                cube[2][2:-4] + cube[3][2:-4] + \
                cube[4] + cube[5] + \
                cube[2][:-6] + cube[3][:-6] + \
                cube[2][6:] + cube[3][6:] 
    else: # sure that 3x3x3
        state = cube[0] + cube[1] + cube[2] + \
                cube[3][6:-3] + cube[4][6:-3] + cube[5][6:-3] + \
                cube[3][3:-6] + cube[4][3:-6] + cube[5][3:-6] + \
                cube[6] + cube[7] + cube[8] + \
                cube[3][:-9] + cube[4][:-9] + cube[5][:-9] + \
                cube[3][9:] + cube[4][9:] + cube[5][9:] 

    solver = process(['rubiks-cube-solver.py', '--state', state])
    _ = solver.readuntil('Solution: ')
    solution = solver.readline().replace('B2', 'B B').replace('D2', 'D D').replace('F2', 'F F').replace('L2', 'L L').replace('R2', 'R R').replace('U2', 'U U')
    solver.close()
    
    t.sendline(solution)

print t.readall()
