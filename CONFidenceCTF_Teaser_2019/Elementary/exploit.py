#!/usr/bin/python
from pwn import *
from multiprocessing.pool import ThreadPool
from os import system

# objdump + regex
checkFlag_fail_rets = [0xcebaa, 0xcebd9, 0xcec08, 0xcec37, 0xcec66, 0xcec95, 0xcecc4, 0xcecf2, 0xced1e, 0xced4d, 0xced7c, 0xcedab, 0xcedda, 0xcee09, 0xcee38, 0xcee66, 0xcee92, 0xceec1, 0xceef0, 0xcef1f, 0xcef4e, 0xcef7c, 0xcefab, 0xcefda, 0xcf006, 0xcf035, 0xcf064, 0xcf092, 0xcf0c1, 0xcf0f0, 0xcf11f, 0xcf14e, 0xcf17a, 0xcf1a9, 0xcf1d8, 0xcf206, 0xcf235, 0xcf264, 0xcf293, 0xcf2c2, 0xcf2ee, 0xcf31d, 0xcf34c, 0xcf37b, 0xcf3a9, 0xcf3d8, 0xcf407, 0xcf436, 0xcf462, 0xcf491, 0xcf4c0, 0xcf4ef, 0xcf51e, 0xcf54d, 0xcf57c, 0xcf5aa, 0xcf5d6, 0xcf605, 0xcf634, 0xcf663, 0xcf691, 0xcf6c0, 0xcf6ef, 0xcf71e, 0xcf74a, 0xcf779, 0xcf7a8, 0xcf7d7, 0xcf806, 0xcf835, 0xcf864, 0xcf892, 0xcf8be, 0xcf8ed, 0xcf91c, 0xcf94b, 0xcf97a, 0xcf9a8, 0xcf9d7, 0xcfa06, 0xcfa32, 0xcfa61, 0xcfa90, 0xcfabe, 0xcfaed, 0xcfb1c, 0xcfb4b, 0xcfb7a, 0xcfba6, 0xcfbd5, 0xcfc04, 0xcfc33, 0xcfc62, 0xcfc91, 0xcfcc0, 0xcfcee, 0xcfd1a, 0xcfd49, 0xcfd78, 0xcfda6, 0xcfdd5, 0xcfe04, 0xcfe33, 0xcfe62, 0xcfe8e, 0xcfebd, 0xcfeec, 0xcff1b, 0xcff49, 0xcff78, 0xcffa7, 0xcffd6, 0xd0002, 0xd0031, 0xd0060, 0xd008f, 0xd00be, 0xd00ed, 0xd011c, 0xd014a, 0xd0176, 0xd01a5, 0xd01d4, 0xd0202, 0xd0231, 0xd0260, 0xd028f, 0xd02be, 0xd02ea, 0xd0319, 0xd0348, 0xd0377, 0xd03a6, 0xd03d5, 0xd0404, 0xd0432, 0xd045e, 0xd048d, 0xd04bc, 0xd04eb, 0xd051a, 0xd0549, 0xd0578, 0xd05a6, 0xd05d2, 0xd0601, 0xd0630, 0xd065f, 0xd068d, 0xd06bc, 0xd06eb, 0xd071a, 0xd0746, 0xd0774, 0xd07a3, 0xd07d2, 0xd0801, 0xd0830, 0xd085f, 0xd088e, 0xd08ba, 0xd08e9, 0xd0918, 0xd0947, 0xd0975, 0xd09a4, 0xd09d3, 0xd0a02, 0xd0a2e, 0xd0a5d, 0xd0a8c, 0xd0abb, 0xd0aea, 0xd0b18, 0xd0b47, 0xd0b76, 0xd0ba2, 0xd0bd1, 0xd0bff, 0xd0c2e, 0xd0c5d, 0xd0c8c, 0xd0cbb, 0xd0cea, 0xd0d16, 0xd0d45, 0xd0d74, 0xd0da2, 0xd0dd1, 0xd0e00, 0xd0e2f, 0xd0e5e, 0xd0e8a, 0xd0eb9, 0xd0ee7, 0xd0f16, 0xd0f45, 0xd0f74, 0xd0fa3, 0xd0fd2, 0xd0ffe, 0xd102d, 0xd105c, 0xd108a, 0xd10b9, 0xd10e8, 0xd1117, 0xd1146, 0xd1172, 0xd11a1, 0xd11cf, 0xd11fe, 0xd122d, 0xd125c, 0xd128b, 0xd12ba, 0xd12e6, 0xd1315, 0xd1344, 0xd1372, 0xd13a1, 0xd13d0, 0xd13ff, 0xd142e, 0xd145a, 0xd1489, 0xd14b8, 0xd14e6, 0xd1515, 0xd1544, 0xd1573, 0xd15a2, 0xd15ce, 0xd15fd, 0xd162c, 0xd165b, 0xd1689, 0xd16b8, 0xd16e7, 0xd1716, 0xd1742, 0xd1771, 0xd17a0, 0xd17cf, 0xd17fe, 0xd182d, 0xd185c, 0xd188a, 0xd18b6, 0xd18e5, 0xd1914, 0xd1943, 0xd1972, 0xd19a1, 0xd19cf, 0xd19fe, 0xd1a2a, 0xd1a59, 0xd1a88, 0xd1ab6, 0xd1ae5, 0xd1b14, 0xd1b43, 0xd1b72, 0xd1b9e, 0xd1bcd, 0xd1bfb, 0xd1c2a, 0xd1c59, 0xd1c88, 0xd1cb7, 0xd1ce6, 0xd1d12, 0xd1d41, 0xd1d70, 0xd1d9f, 0xd1dce, 0xd1dfd, 0xd1e2b, 0xd1e5a, 0xd1e86, 0xd1eb5, 0xd1ee3, 0xd1f12, 0xd1f41, 0xd1f70, 0xd1f9f, 0xd1fce, 0xd1ffa, 0xd2029, 0xd2058, 0xd2086, 0xd20b5, 0xd20e4, 0xd2113, 0xd2142, 0xd216e, 0xd219d, 0xd21cb, 0xd21fa, 0xd2229, 0xd2258, 0xd2287, 0xd22b6, 0xd22e2, 0xd2311, 0xd2340, 0xd236f, 0xd239e, 0xd23cd, 0xd23fc, 0xd242a, 0xd2456, 0xd2485, 0xd24b4, 0xd24e3, 0xd2511, 0xd2540, 0xd256f, 0xd259e, 0xd25ca, 0xd25f8, 0xd2627, 0xd2656, 0xd2685, 0xd26b4, 0xd26e3, 0xd2712, 0xd273e, 0xd276d, 0xd279c, 0xd27cb, 0xd27fa, 0xd2829, 0xd2857, 0xd2886, 0xd28b2, 0xd28e1, 0xd2910, 0xd293f, 0xd296e, 0xd299d, 0xd29cc, 0xd29fa, 0xd2a26, 0xd2a55, 0xd2a84, 0xd2ab2, 0xd2ae1, 0xd2b10, 0xd2b3f, 0xd2b6e, 0xd2b9a, 0xd2bc9, 0xd2bf7, 0xd2c26, 0xd2c55, 0xd2c84, 0xd2cb3, 0xd2ce2, 0xd2d0e, 0xd2d3d, 0xd2d6c, 0xd2d9b, 0xd2dc9, 0xd2df8, 0xd2e27, 0xd2e56, 0xd2e82, 0xd2eb1, 0xd2ee0, 0xd2f0f, 0xd2f3d, 0xd2f6c, 0xd2f9b, 0xd2fca, 0xd2ff6, 0xd3025, 0xd3053, 0xd3082, 0xd30b1, 0xd30e0, 0xd310f, 0xd313e, 0xd316a, 0xd3199, 0xd31c8, 0xd31f7, 0xd3226, 0xd3254, 0xd3283, 0xd32b2, 0xd32de, 0xd330d, 0xd333c, 0xd336b, 0xd339a, 0xd33c9, 0xd33f7, 0xd3426, 0xd3452, 0xd3480, 0xd34af, 0xd34de, 0xd350d, 0xd353c, 0xd356b, 0xd359a, 0xd35c6, 0xd35f4, 0xd3623, 0xd3652, 0xd3681, 0xd36b0, 0xd36df, 0xd370e, 0xd373a, 0xd3769, 0xd3798, 0xd37c6, 0xd37f5, 0xd3824, 0xd3853, 0xd3882, 0xd38ae, 0xd38dd, 0xd390c, 0xd393a, 0xd3969, 0xd3998, 0xd39c7, 0xd39f6, 0xd3a22, 0xd3a50, 0xd3a7f, 0xd3aae, 0xd3add, 0xd3b0c, 0xd3b3b, 0xd3b6a, 0xd3b96, 0xd3bc5, 0xd3bf4, 0xd3c23, 0xd3c51, 0xd3c80, 0xd3caf, 0xd3cde, 0xd3d0a, 0xd3d39, 0xd3d68, 0xd3d96, 0xd3dc5, 0xd3df4, 0xd3e23, 0xd3e52, 0xd3e7e, 0xd3eac, 0xd3edb, 0xd3f0a, 0xd3f39, 0xd3f68, 0xd3f97, 0xd3fc6, 0xd3ff2, 0xd4021, 0xd4050, 0xd407f, 0xd40ae, 0xd40dc, 0xd410b, 0xd413a, 0xd4166, 0xd4195, 0xd41c4, 0xd41f3, 0xd4222, 0xd4251, 0xd427f, 0xd42ae, 0xd42da, 0xd4309, 0xd4338, 0xd4367, 0xd4396, 0xd43c5, 0xd43f4, 0xd4422, 0xd444e, 0xd447d, 0xd44ac, 0xd44db, 0xd450a, 0xd4538, 0xd4567, 0xd4596, 0xd45c2, 0xd45f1, 0xd4620, 0xd464f, 0xd467d, 0xd46ac, 0xd46db, 0xd470a, 0xd4736, 0xd4765, 0xd4794, 0xd47c3, 0xd47f2, 0xd4821, 0xd4850, 0xd487e, 0xd48aa, 0xd48d8, 0xd4907, 0xd4936, 0xd4965, 0xd4994, 0xd49c3, 0xd49f2, 0xd4a1e, 0xd4a4d, 0xd4a7c, 0xd4aab, 0xd4ada, 0xd4b09, 0xd4b37, 0xd4b66, 0xd4b92, 0xd4bc1, 0xd4bf0, 0xd4c1f, 0xd4c4e, 0xd4c7d, 0xd4cab, 0xd4cda, 0xd4d06, 0xd4d35, 0xd4d63, 0xd4d92, 0xd4dc1, 0xd4df0, 0xd4e1f, 0xd4e4e, 0xd4e7a, 0xd4ea8, 0xd4ed7, 0xd4f06, 0xd4f35, 0xd4f64, 0xd4f93, 0xd4fc2, 0xd4fee, 0xd501d, 0xd504c, 0xd507b, 0xd50aa, 0xd50d9, 0xd5107, 0xd5136, 0xd5162, 0xd5191, 0xd51bf, 0xd51ee, 0xd521d, 0xd524c, 0xd527b, 0xd52aa, 0xd52d6, 0xd5304, 0xd5333, 0xd5362, 0xd5391, 0xd53c0, 0xd53ef, 0xd541e, 0xd544a, 0xd5479, 0xd54a8, 0xd54d7, 0xd5505, 0xd5534, 0xd5563, 0xd5592, 0xd55be, 0xd55ed, 0xd561c, 0xd564a, 0xd5679, 0xd56a8, 0xd56d7, 0xd5706, 0xd5732, 0xd5761, 0xd5790, 0xd57bf, 0xd57ee, 0xd581d, 0xd584c, 0xd587a, 0xd58a6, 0xd58d5, 0xd5904, 0xd5932, 0xd5961, 0xd5990, 0xd59bf, 0xd59ee, 0xd5a1a, 0xd5a49, 0xd5a78, 0xd5aa7, 0xd5ad6, 0xd5b05, 0xd5b34, 0xd5b62, 0xd5b8e, 0xd5bbd, 0xd5bec, 0xd5c1a, 0xd5c49, 0xd5c78, 0xd5ca7, 0xd5cd6, 0xd5d02, 0xd5d31, 0xd5d60, 0xd5d8f, 0xd5dbe, 0xd5ded, 0xd5e1b, 0xd5e4a, 0xd5e76, 0xd5ea5, 0xd5ed4, 0xd5f03, 0xd5f31, 0xd5f60, 0xd5f8f, 0xd5fbe, 0xd5fea, 0xd6019, 0xd6048, 0xd6076, 0xd60a5, 0xd60d4, 0xd6103, 0xd6132, 0xd615e, 0xd618d, 0xd61bc, 0xd61eb, 0xd6219, 0xd6248, 0xd6277, 0xd62a6, 0xd62d2, 0xd6301, 0xd6330, 0xd635f, 0xd638d, 0xd63bc, 0xd63eb, 0xd641a, 0xd6446, 0xd6475, 0xd64a4, 0xd64d3, 0xd6502, 0xd6531, 0xd6560, 0xd658e, 0xd65ba, 0xd65e8, 0xd6617, 0xd6646, 0xd6675, 0xd66a4, 0xd66d3, 0xd6702, 0xd672e, 0xd675d, 0xd678c, 0xd67bb, 0xd67ea, 0xd6819, 0xd6847, 0xd6876, 0xd68a2, 0xd68d1, 0xd6900, 0xd692f, 0xd695e, 0xd698d, 0xd69bb, 0xd69ea, 0xd6a16, 0xd6a45, 0xd6a73, 0xd6aa2, 0xd6ad1, 0xd6b00, 0xd6b2f, 0xd6b5e, 0xd6b8a, 0xd6bb9, 0xd6be8, 0xd6c17, 0xd6c46, 0xd6c75, 0xd6ca4, 0xd6cd2, 0xd6cfe, 0xd6d2d, 0xd6d5c, 0xd6d8b, 0xd6dba, 0xd6de9, 0xd6e17, 0xd6e46, 0xd6e72, 0xd6ea1, 0xd6ed0, 0xd6eff, 0xd6f2e, 0xd6f5d, 0xd6f8b, 0xd6fba, 0xd6fe6, 0xd7015, 0xd7044, 0xd7073, 0xd70a2, 0xd70d1, 0xd70ff, 0xd712e, 0xd715a, 0xd7189, 0xd71b7, 0xd71e6, 0xd7215, 0xd7244, 0xd7273, 0xd72a2, 0xd72ce, 0xd72fd, 0xd732b, 0xd735a, 0xd7389, 0xd73b8, 0xd73e7, 0xd7416, 0xd7442, 0xd7471, 0xd74a0, 0xd74ce, 0xd74fd, 0xd752c, 0xd755b, 0xd758a, 0xd75b6, 0xd75e5, 0xd7613, 0xd7642, 0xd7671, 0xd76a0, 0xd76cf, 0xd76fe, 0xd772a, 0xd7759, 0xd7788, 0xd77b6, 0xd77e5, 0xd7814, 0xd7843, 0xd7872, 0xd789e, 0xd78cd, 0xd78fc, 0xd792b, 0xd795a, 0xd7988, 0xd79b7, 0xd79e6, 0xd7a12, 0xd7a41, 0xd7a70, 0xd7a9f, 0xd7ace, 0xd7afc, 0xd7b2b, 0xd7b5a, 0xd7b86, 0xd7bb5, 0xd7be4, 0xd7c13, 0xd7c42, 0xd7c71, 0xd7c9f, 0xd7cce, 0xd7cfa, 0xd7d29, 0xd7d58, 0xd7d87, 0xd7db6, 0xd7de4, 0xd7e13, 0xd7e42, 0xd7e6a, 0xd7e95, 0xd7ec0, 0xd7eeb, 0xd7f16, 0xd7f41, 0xd7f6c, 0xd7f96, 0xd7fc2, 0xd7ff0, 0xd801f, 0xd804e, 0xd807d, 0xd80ac, 0xd80db, 0xd810a, 0xd8136, 0xd8165, 0xd8194, 0xd81c3, 0xd81f2, 0xd8220, 0xd824c, 0xd8278]
checkFlag_success_ret = 0xD827F
main_ret = 0x76f

print '[+] unpacking binary'
binary_path = './elementary'
system('tar -xzf elementary_2bf9ff22893d262ef2b3abe6901d9b84d50c4e8a5bb5857f3c3ea27e8d869c17.tar.gz')
system('chmod +x {}'.format(binary_path))

print '[+] patching bianry'
with file(binary_path, 'r+b') as fh:
    #  ret from main just after call to checkFlag()
    fh.seek(main_ret)
    fh.write('\xc9\xc3') 
    #  override checkFlag() success return vale
    fh.seek(checkFlag_success_ret)
    fh.write('\xb8' + p32(0x80))
    #  override `mov eax, 0` in all funcs with `mov eax, i % 128` 
    for i in range(len(checkFlag_fail_rets)):
        fh.seek(checkFlag_fail_rets[i])
        fh.write('\xb8' + p32(i % 0x80))  
    fh.close()


def run_binary(binary_path, input):
    context.log_level='error'
    t = process(binary_path)
    t.sendline(input)
    rcode = t.poll(True)
    t.kill()
    return rcode

# objdump + regex
check_order = [ 64, 38, 67, 88,  21, 68, 95, 36, 39, 77, 101, 90, 6,  48, 23, 62, 81, 83, 79, 44, 25, 17, 52, 3,  29, 102, 28, 93,
                16, 43, 78, 9,   60, 70, 71, 65, 40, 12, 56,  13, 57, 37, 69, 7,  84, 58, 89, 91, 14, 82, 45, 76, 66, 98,  75, 47,
                97, 34, 80, 103, 86, 5,  74, 1,  18, 51, 72,  26, 8,  31, 42, 85, 49, 33, 54, 63, 46, 4,  41, 24, 73, 35,  30, 92, 11,
                87, 50, 53, 32,  99, 96, 19, 10, 15, 55, 100, 2,  59, 94, 61, 22, 0,  27, 20]
aval_chars = r'_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./0123456789:;<=>?@[\]^`{|}~'
password = list('a' * 104)
pool = ThreadPool(processes=len(aval_chars))

print '[+] bruteforcing'
for i in range(len(check_order)):
    threads = list()
    rcodes = list()
    
    for j in range(len(aval_chars)):
        password[check_order[i]] = aval_chars[j]
        threads.append(pool.apply_async(run_binary, [binary_path, ''.join(password)]))

    for j in range(len(aval_chars)):
        rcodes.append(threads[j].get())

    if (i + 1) % 16 == 0:
        password[check_order[i]] = aval_chars[rcodes.index(min(rcodes))]
    else:
        password[check_order[i]] = aval_chars[rcodes.index(max(rcodes))]

    print '[-] step: {:03d} flag: {}'.format(i, ''.join(password))
print '[+] done'
